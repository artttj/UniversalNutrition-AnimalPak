---

- name: image provision
  hosts: localhost
  connection: local
  become: yes
  tasks:
    - name: set chmod key for private key
      file:
        state: directory
        path: "{{ item }}"
        owner: magento
        group: magento
        mode: 0700
      loop:
        - /home/magento/.ssh
        - /home/magento/.composer
    - name: create known host keys
      shell: |
        ssh-keyscan -R github.com
        ssh-keyscan github.com >> /home/magento/.ssh/known_hosts
        ssh-keyscan vs-ssh.visualstudio.com >> /home/magento/.ssh/known_hosts
        chown magento:magento /home/magento/.ssh/known_hosts
    - name: copy all ssh keys
      copy:
        src: "{{ item }}"
        dest: "/home/magento/.ssh/{{ item | basename }}"
        owner: magento
        group: magento
        mode: 0600
      loop: "{{ query('fileglob', 'files/ssh/*') }}"
    - name: change magento user:group permissions
      file:
        state: directory
        path: "{{ item }}"
        mode: u=rwX,g=rwX,o=rX
        recurse: yes
        owner: "{{ magento_user }}"
        group: "{{ magento_group }}"
      loop:
        - /usr/local/rvm/
        - /var/lib/php/session/
        - "{{ site_root }}/"
    - name: copy auth.json to path
      copy:
        src: auth.json
        dest: "/home/magento/.composer/auth.json"
        owner: "{{ magento_user }}"
        group: "{{ magento_group }}"
    - name: apply templates
      template:
        src: "{{ item.src }}.j2"
        dest: "{{ item.dest }}"
        owner: "{{ magento_user }}"
        group: "{{ magento_group }}"
      loop:
        - src: default.conf
          dest: "/etc/nginx/sites-available/{{ site_domain }}.conf"
    - name: set symlink for site
      file:
        src: "/etc/nginx/sites-available/{{ site_domain }}.conf"
        path: "/etc/nginx/sites-enabled/{{ site_domain }}.conf"
        state: link
    - name: make sure umask is set properly
      replace:
        path: /etc/profile
        regexp: "umask 0.2"
        replace: "umask 002"
    - name: remove any remaining build scripts
      file: path="{{ item }}" state=absent
      loop:
        - "/home/magento/.vault_pass"
        - "/docker-entrypoint.d/mysql.sh"
        - "{{ playbook_dir }}/files"
  tags:
    - image

- name: database provision
  hosts: localhost
  connection: local
  tasks:
    - name: set correct url
      shell: |
        sudo mysql \
          -h database \
          -proot_password \
          {{ mysql_database | default('magento_database') }} \
          -e "update core_config_data set value = 'https://{{ item.domain | default(item) }}/' where path like '%secure/base_url%';"

      loop: "{{ site_domains }}"
  tags:
    - database
    - sync

- name: owner play
  hosts: localhost
  connection: local
  tasks:
    - name: set default owner:group to magento:nginx
      command: "{{ item }} {{ site_root }}"
      become: yes
      loop:
        - "setfacl -R -m d:u:{{ magento_user}}:rwX"
        - "setfacl -R -m d:g:{{ magento_group }}:rwX"
    - name: make sure paths have correct user:group
      file:
        state: directory
        recurse: yes
        owner: "{{ magento_user }}"
        group: "{{ magento_group }}"
        mode: u=rwX,g=rwX,o=rX
        path: "{{ playbook_dir }}"
      become: yes
  tags:
    - owner
    - build
    - sync
    - install

- name: php template play
  hosts: localhost
  connection: local
  tasks:
    - name: check for env.php file
      stat: path="{{ playbook_dir }}/app/etc/env.php"
      register: envphp
    - name: generate env.php when doesn't exist
      template:
        src: "env.php.j2"
        dest: "{{ playbook_dir }}/app/etc/env.php"
      when: not envphp.stat.exists
    - name: check for config.php file
      stat: path="{{ playbook_dir }}/app/etc/config.php"
      register: configphp
    - name: use config.php.sample when config.php doesn't exist
      copy:
        src: "app/etc/config.php.sample"
        dest: "{{ playbook_dir }}/app/etc/config.php"
      when: not configphp.stat.exists
  tags:
    - sync
    - template

- name: build provision
  hosts: localhost
  connection: local
  tasks:
    - name: make sure vendor doesn't exist
      file:
        path: "{{ playbook_dir }}/vendor"
        state: absent
    - name: run composer
      shell: composer install
    - name: create media directory
      file:
        state: directory
        path: "{{ playbook_dir }}/pub/media"
        owner: "{{ magento_user }}"
        group: "{{ magento_group }}"
    - name: run bundle install
      shell: bundle install
    - name: run yarn
      shell: yarn
      args:
        executable: /bin/bash
        chdir: "{{ item }}"
      loop:
        - "{{ playbook_dir }}"
        - "{{ playbook_dir }}/vendor/somethingdigital/magento2-theme-bryantpark"
        - "{{ playbook_dir }}/vendor/snowdog/frontools"
    - name: remove vault_pass
      file: path=/home/magento/.vault_pass state=absent
  tags:
    - build

- name: production provision
  hosts: localhost
  connection: local
  tasks:
    - name: PHP compilation
      shell: "php {{ playbook_dir }}/bin/magento {{ item }}"
      loop:
        - "setup:di:compile"
        - "setup:static-content:deploy {{ static_content_deploy_zone | default('en_us') }} -f" 
        - "setup:static-content:deploy --area adminhtml en_US -f"
    - name: r.js optimizer on static assets
      shell: yarn build-za
      when: lookup('env', 'RJS_OPTIMIZATION') == "true"
  tags:
    - production

- name: sync provision
  hosts: localhost
  connection: local
  tasks:
    - name: make sure local cache clean
      file:
        state: absent
        path: "{{ playbook_dir }}/{{ item }}"
      loop:
        - var/cache
        - generated/code
        - generated/metadata
    - name: run magento upgrade
      shell: "php {{ playbook_dir }}/bin/magento {{ item }}"
      loop:
        - "app:config:import"
        - "cache:clean"
        - "setup:upgrade"
        - "deploy:mode:set --skip-compilation developer"
        - "setup:di:compile"
    - name: setup static content of theme
      shell: "php {{ playbook_dir }}/bin/magento {{ item }}"
      loop:
        - "sd:dev:static {{ client_theme }}"
        - "sd:dev:static --area=adminhtml {{ magento_theme }}"
    - name: run yarn build (for develop)
      shell: "yarn build"
  tags:
    - sync

- name: install provision
  hosts: localhost
  connection: local
  tasks:
    - name: run magento install
      shell: |
        {{ playbook_dir }}/bin/magento setup:install \
          --db-host=database \
          --db-name=magento_database \
          --db-user=magento_user \
          --db-password=magento_password \
          --base-url=https://{{ site_domain  }}/ \
          --admin-firstname=Admin \
          --admin-lastname=User \
          --admin-email=admin@user.com \
          --admin-user=magento2 \
          --admin-password=magento2_password \
          --backend-frontname=admin \
          --cleanup-database \
          --key={{ magento_crypt_key }}
    - name: apply template
      template:
        src: "env.php.j2"
        dest: "{{ playbook_dir }}/app/etc/env.php"
  tags:
    - install

##
# Below installs Unirgy Package
# But the following variables must exist with values in group_vars/all:
# urapidflow_license_key, urapidflow_pkg_version, ioncube_version, tmp_download_path
##
- name: install urapidflow
  hosts: localhost
  connection: local
  tags:
    - urapidflow
  tasks:
    - name: get urapidflow
      unarchive:
        src: "https://download.unirgy.com/simple/download/{{ urapidflow_license_key }}/Unirgy_RapidFlow.zip?php={{ urapidflow_pkg_version }}&ioncube={{ ioncube_version }}"
        dest: "{{ tmp_download_path }}"
      become: yes
    - name: make sure urapidflow does not exist
      file:
        path: "{{ magento_root }}/app/code/Unirgy"
        state: absent
    - name: copy new urapidflow install
      copy:
        src: "{{ tmp_download_path }}/app/code/Unirgy"
        dest: "{{ magento_root }}/app/code/Unirgy"
        remote_src: yes
