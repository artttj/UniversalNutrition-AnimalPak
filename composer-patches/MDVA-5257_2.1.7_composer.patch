diff --git a/vendor/magento/module-customer/Block/CustomerData.php b/vendor/magento/module-customer/Block/CustomerData.php
index ab2d6bd9a42..2dd26904110 100644
--- a/vendor/magento/module-customer/Block/CustomerData.php
+++ b/vendor/magento/module-customer/Block/CustomerData.php
@@ -8,14 +8,22 @@ namespace Magento\Customer\Block;
 class CustomerData extends \Magento\Framework\View\Element\Template
 {
     /**
+     * @var array
+     */
+    private $expirableSectionNames;
+
+    /**
      * @param \Magento\Framework\View\Element\Template\Context $context
+     * @param array $expirableSectionNames
      * @param array $data
      */
     public function __construct(
         \Magento\Framework\View\Element\Template\Context $context,
-        array $data = []
+        array $data = [],
+        array $expirableSectionNames = []
     ) {
         parent::__construct($context, $data);
+        $this->expirableSectionNames = $expirableSectionNames;
     }

     /**
@@ -40,4 +48,26 @@ class CustomerData extends \Magento\Framework\View\Element\Template
     {
         return $this->getUrl($route, ['_secure' => $this->getRequest()->isSecure()]);
     }
+
+    /**
+     * Retrieve lifetime period (in minutes) of the frontend section configuration.
+     *
+     * Once this period has expired the corresponding section must be invalidated and reloaded.
+     *
+     * @return int section lifetime in minutes
+     */
+    public function getExpirableSectionLifetime()
+    {
+        return (int)$this->_scopeConfig->getValue('customer/online_customers/section_data_lifetime');
+    }
+
+    /**
+     * Retrieve the list of sections that can expire.
+     *
+     * @return array
+     */
+    public function getExpirableSectionNames()
+    {
+        return array_values($this->expirableSectionNames);
+    }
 }
diff --git a/vendor/magento/module-customer/etc/adminhtml/system.xml b/vendor/magento/module-customer/etc/adminhtml/system.xml
index 055bcdb045b..fdc2b1bf299 100644
--- a/vendor/magento/module-customer/etc/adminhtml/system.xml
+++ b/vendor/magento/module-customer/etc/adminhtml/system.xml
@@ -258,6 +258,10 @@
                     <label>Online Minutes Interval</label>
                     <comment>Leave empty for default (15 minutes).</comment>
                 </field>
+                <field id="section_data_lifetime" translate="label comment" type="text" sortOrder="1" showInDefault="1" showInWebsite="0" showInStore="0">
+                    <label>Customer Data Lifetime</label>
+                    <comment>Please specify value in minutes.</comment>
+                </field>
             </group>
         </section>
         <section id="general">
diff --git a/vendor/magento/module-customer/etc/config.xml b/vendor/magento/module-customer/etc/config.xml
index f891cd284e0..737d01e35ee 100644
--- a/vendor/magento/module-customer/etc/config.xml
+++ b/vendor/magento/module-customer/etc/config.xml
@@ -93,6 +93,9 @@ T: {{var telephone}}
 {{depend fax}}<br/>F: {{var fax}}{{/depend}}|
 {{depend vat_id}}<br/>VAT: {{var vat_id}}{{/depend}}|]]></pdf>
             </address_templates>
+            <online_customers>
+                <section_data_lifetime>60</section_data_lifetime>
+            </online_customers>
         </customer>
         <general>
             <restriction>
diff --git a/vendor/magento/module-customer/etc/frontend/di.xml b/vendor/magento/module-customer/etc/frontend/di.xml
index 4562acb00fe..67c1e1bd75d 100644
--- a/vendor/magento/module-customer/etc/frontend/di.xml
+++ b/vendor/magento/module-customer/etc/frontend/di.xml
@@ -70,4 +70,11 @@
             </argument>
         </arguments>
     </type>
+    <type name="Magento\Customer\Block\CustomerData">
+        <arguments>
+            <argument name="expirableSectionNames" xsi:type="array">
+                <item name="cart" xsi:type="string">cart</item>
+            </argument>
+        </arguments>
+    </type>
 </config>
diff --git a/vendor/magento/module-customer/view/frontend/templates/js/customer-data.phtml b/vendor/magento/module-customer/view/frontend/templates/js/customer-data.phtml
index fa52f0e725f..2d431ded642 100644
--- a/vendor/magento/module-customer/view/frontend/templates/js/customer-data.phtml
+++ b/vendor/magento/module-customer/view/frontend/templates/js/customer-data.phtml
@@ -12,6 +12,8 @@
     /* @escapeNotVerified */ echo $this->helper('Magento\Framework\Json\Helper\Data')->jsonEncode([
         '*' => ['Magento_Customer/js/customer-data' => [
             'sectionLoadUrl' => $block->getCustomerDataUrl('customer/section/load'),
+            'expirableSectionLifetime' => $block->getExpirableSectionLifetime(),
+            'expirableSectionNames' => $block->getExpirableSectionNames(),
             'cookieLifeTime' => $block->getCookieLifeTime(),
             'updateSessionUrl' => $block->getCustomerDataUrl('customer/account/updateSession'),
         ]],
diff --git a/vendor/magento/module-customer/view/frontend/web/js/customer-data.js b/vendor/magento/module-customer/view/frontend/web/js/customer-data.js
index a017eba4c79..52a3abb57a1 100644
--- a/vendor/magento/module-customer/view/frontend/web/js/customer-data.js
+++ b/vendor/magento/module-customer/view/frontend/web/js/customer-data.js
@@ -188,17 +188,23 @@ define([
          */
         init: function() {
             var countryData,
-                privateContent = $.cookieStorage.get('private_content_version');
+                privateContent = $.cookieStorage.get('private_content_version'),
+                expiredSectionNames;

             if (_.isEmpty(storage.keys())) {
                 if (!_.isEmpty(privateContent)) {
                     this.reload([], false);
                 }
-            } else if (this.needReload()) {
+
+                return;
+            }
+            expiredSectionNames = this.getExpiredSectionNames();
+
+            if (expiredSectionNames.length > 0) {
                 _.each(dataProvider.getFromStorage(storage.keys()), function (sectionData, sectionName) {
                     buffer.notify(sectionName, sectionData);
                 });
-                this.reload(this.getExpiredKeys(), false);
+                this.reload(expiredSectionNames, false);
             } else {
                 _.each(dataProvider.getFromStorage(storage.keys()), function (sectionData, sectionName) {
                     buffer.notify(sectionName, sectionData);
@@ -218,57 +224,64 @@ define([
         },

         /**
-         * @return {Boolean}
+         * Retrieve the list of sections that has expired since last page reload.
+         *
+         * Sections can expire due to lifetime constraints or due to inconsistent storage information
+         * (validated by cookie data).
+         *
+         * @return {Array}
          */
-        needReload: function () {
-            var cookieSections = $.cookieStorage.get('section_data_ids'),
-                storageVal,
-                name;
-
-            if (typeof cookieSections != 'object') {
-                return true;
-            }
+        getExpiredSectionNames: function () {
+            var expiredSectionNames = [],
+                cookieSectionTimestamps = $.cookieStorage.get('section_data_ids') || {},
+                sectionLifetime = options.expirableSectionLifetime * 60,
+                currentTimestamp = Math.floor(Date.now() / 1000),
+                sectionData;
+
+            // process sections that can expire due to lifetime constraints
+            _.each(options.expirableSectionNames, function (sectionName) {
+                sectionData = storage.get(sectionName);
+
+                if (typeof sectionData === 'object' && sectionData['data_id'] + sectionLifetime <= currentTimestamp) {
+                    expiredSectionNames.push(sectionName);
+                }
+            });
+            // process sections that can expire due to storage information inconsistency
+            _.each(cookieSectionTimestamps, function (cookieSectionTimestamp, sectionName) {
+                sectionData = storage.get(sectionName);
+                if (typeof sectionData === 'undefined' ||
+                    typeof sectionData === 'object' &&
+                    cookieSectionTimestamp != sectionData['data_id'] //eslint-disable-line
+                ) {
+                    expiredSectionNames.push(sectionName);
+                }
+            });

-            for (name in cookieSections) {
-                if (name !== undefined) {
-                    storageVal = storage.get(name);
+            return _.uniq(expiredSectionNames);
+        },

-                    if (typeof storageVal === 'undefined' ||
-                        typeof storageVal == 'object' && cookieSections[name] > storageVal['data_id']
-                    ) {
-                        return true;
-                    }
-                }
-            }
+        /**
+         * Check if some sections have to be reloaded.
+         *
+         * @deprecated Use getExpiredSectionNames instead.
+         *
+         * @return {Boolean}
+         */
+        needReload: function () {
+            var expiredSectionNames = this.getExpiredSectionNames();

-            return false;
+            return expiredSectionNames.length > 0;
         },

         /**
+         * Retrieve the list of expired keys.
+         *
+         * @deprecated Use getExpiredSectionNames instead.
          *
          * @return {Array}
          */
         getExpiredKeys: function () {
-            var cookieSections = $.cookieStorage.get('section_data_ids'),
-                storageVal,
-                name,
-                expiredKeys = [];
-
-            if (typeof cookieSections != 'object') {
-                return [];
-            }
-
-            for (name in cookieSections) {
-                storageVal = storage.get(name);
-
-                if (typeof storageVal === 'undefined' ||
-                    typeof storageVal == 'object' && cookieSections[name] !=  storage.get(name)['data_id']
-                ) {
-                    expiredKeys.push(name);
-                }
-            }
-
-            return expiredKeys;
+            return this.getExpiredSectionNames();
         },

         /**